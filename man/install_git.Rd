% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/install_git.R
\name{install_git}
\alias{install_git}
\title{Install a package from git}
\usage{
install_git(url, subdir = NULL, branch = NULL, args = character(0), ...)
}
\arguments{
\item{url}{Location of package. The url should point to a public or
private repository.}

\item{subdir}{A sub-directory within a git repository that may
contain the package we are interested in installing.}

\item{branch}{Name of branch or tag to use, if not master.}

\item{args}{DEPRECATED. A character vector providing extra arguments to
pass on to git.}

\item{...}{passed on to \code{\link{install}}}

\item{dependencies}{\code{NA} (the default) has the same behavior as
  \code{install.packages} (installs "Depends", "Imports", and "LinkingTo").
  See the documentation for
  \code{\link[utils:install.packages]{install.packages}} for details on other
  valid arguments.}
}
\description{
Use the \code{\link[devtools:install_git]{devtools::install_git}}
function to install packages into a project private library. Using this
function rather than calling devtools directly enables you to install git
packages without adding devtools and it's dependencies to your project
private library.
}
\note{
This function requires the \pkg{devtools} package and will prompt to
to install it if it's not already available in the standard library paths.
In this case, devtools will be installed into the standard user package
library rather than the project private library.
}
\examples{
\dontrun{
install_git("git://github.com/hadley/stringr.git")
install_git("git://github.com/hadley/stringr.git", branch = "stringr-0.2")
}
}

